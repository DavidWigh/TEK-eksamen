float px = 400;
float py = 880;

int niveau = 0;
boolean deathscreen;
boolean menuscreen = true;

int score = 0;
int highScore = 0;
int spilValg = 0;

StringList tekst;
String[] tekstArray = {""};
String displayText = "";

PFont Font;

int wave = 1;

//4 række
Enemy enemy1;
Enemy enemy2;
Enemy enemy3;
Enemy enemy4;
Enemy enemy5;

//3 række
Enemy enemy6;
Enemy enemy7;
Enemy enemy8;
Enemy enemy9;
Enemy enemy10;

//2 række
Enemy enemy11;
Enemy enemy12;
Enemy enemy13;
Enemy enemy14;
Enemy enemy15;

//1 række
Enemy enemy16;
Enemy enemy17;
Enemy enemy18;
Enemy enemy19;
Enemy enemy20;


void setup(){
  size(800,1000);
  frameRate(60);
  enemy1 = new Enemy(240, 100);
  enemy2 = new Enemy(325, 100);
  enemy3 = new Enemy(410, 100);
  enemy4 = new Enemy(495, 100);
  enemy5 = new Enemy(580, 100);
  
  enemy6 = new Enemy(240, 165);
  enemy7 = new Enemy(325, 165);
  enemy8 = new Enemy(410, 165);
  enemy9 = new Enemy(495, 165);
  enemy10 = new Enemy(580, 165);
  
  enemy11 = new Enemy(240, 230);
  enemy12 = new Enemy(325, 230);
  enemy13 = new Enemy(410, 230);
  enemy14 = new Enemy(495, 230);
  enemy15 = new Enemy(580, 230);
  
  enemy16 = new Enemy(240, 295);
  enemy17 = new Enemy(325, 295);
  enemy18 = new Enemy(410, 295);
  enemy19 = new Enemy(495, 295);
  enemy20 = new Enemy(580, 295);
  
  tekst = new StringList();
  
  Font = createFont("Arial Bold", 18);
}

void draw(){
  background(0);
  if(deathscreen == true){
    textSize(32);
    text("Highscore:",50,50);
    text("Score:",50,100);
    text(""+highScore,250,50);
    text(""+score,250,100);
    text("Game Over",325,500);
    text("Tryk på en vilkårlig tast for at starte forfra",75,550);
    fill(255);
    if(keyPressed == true||mousePressed==true){
      deathscreen = false;
      fill(0);
      rect(0,0,800,1000);
      menuscreen = true;
      mouseX=0;
      mouseY=0;
      spilValg = 0;
      niveau = 0;
    }
  }
  if(menuscreen == true){
    rectMode(CORNER);
    fill(0);
    stroke(255);
    rect(30,64,415,44);
    rect(30,128,415,44);
    rect(30,192,415,44);
    rect(30,256,415,44);
    rect(30,320,415,44);
    
    fill(0);
    stroke(255);
    rect(30,457,415,44);
    rect(30,521,415,44);
    rect(30,585,415,44);
    
    fill(0);
    stroke(255);
    rect(320,768,148,44);
    
    if(spilValg==1){
      fill(0);
      stroke(255,0,0);
      rect(30,64,415,44);
    }
    if(spilValg==2){
      fill(0);
      stroke(255,0,0);
      rect(30,128,415,44);
    }
    if(spilValg==3){
      fill(0);
      stroke(255,0,0);
      rect(30,192,415,44);
    }
    if(spilValg==4){
      fill(0);
      stroke(255,0,0);
      rect(30,256,415,44);
    }
    if(spilValg==5){
      fill(0);
      stroke(255,0,0);
      rect(30,320,415,44);
    }
    if(niveau==1){
      fill(0);
      stroke(255,0,0);
      rect(30,457,415,44);
    }
    if(niveau==2){
      fill(0);
      stroke(255,0,0);
      rect(30,521,415,44);
    }
    if(niveau==3){
      fill(0);
      stroke(255,0,0);
      rect(30,585,415,44);
    }
    
    fill(255);
    textSize(32);
    text("Startmenu",10,32);
    text("Addition og substrahering",35,96);
    text("Multiplikation",35,160);
    text("Division",35,224);
    text("Geometri",35,288);
    text("Brøker og decimalregning",35,352);
    text("Sværhedsgrad",10,425);
    text("Let",35,489);
    text("Medium",35,553);
    text("Svær",35,617);
    text("Start spil",325,800);
  }
  if(deathscreen == false && menuscreen == false){
    fill(255);
    textSize(25);
    text("Score: "+score, 50, 30);
    textSize(25);
    text("Highscore: "+highScore, 50, 60);
  
    noStroke();
    fill(255);
    rect(px, py, 50, 30);
    
    stroke(255);
    fill(0);
    rect(400, 950, 670, 50);
    fill(255);
    textSize(32);
    text(""+displayText, 75, 963);
  
  
    noStroke();
    //4 række
    enemy1.display();
    enemy2.display();
    enemy3.display();
    enemy4.display();
    enemy5.display();
    enemy1.enemyMove();
    enemy2.enemyMove();
    enemy3.enemyMove();
    enemy4.enemyMove();
    enemy5.enemyMove();
  
    //3 række
    enemy6.display();
    enemy7.display();
    enemy8.display();
    enemy9.display();
    enemy10.display();
    enemy6.enemyMove();
    enemy7.enemyMove();
    enemy8.enemyMove();
    enemy9.enemyMove();
    enemy10.enemyMove();
    
    //2 række
    enemy11.display();
    enemy12.display();
    enemy13.display();
    enemy14.display();
    enemy15.display();
    enemy11.enemyMove();
    enemy12.enemyMove();
    enemy13.enemyMove();
    enemy14.enemyMove();
    enemy15.enemyMove();
  
    //1 række
    enemy16.display();
    enemy17.display();
    enemy18.display();
    enemy19.display();
    enemy20.display();
    enemy16.enemyMove();
    enemy17.enemyMove();
    enemy18.enemyMove();
    enemy19.enemyMove();
    enemy20.enemyMove();
    }
  
    if(enemy1.death == true && enemy2.death == true && enemy3.death == true && enemy4.death == true && enemy5.death == true && enemy6.death == true && enemy7.death == true && enemy8.death == true && enemy9.death == true && enemy10.death == true && enemy11.death == true && enemy12.death == true && enemy13.death == true && enemy14.death == true && enemy15.death == true && enemy16.death == true && enemy17.death == true && enemy18.death == true && enemy19.death == true && enemy20.death == true){
      rectMode(CENTER);
      enemy1.death = false; enemy1.enemyX = 240; enemy1.enemyY = 100; enemy1.count = 200; enemy1.stop = false; enemy1.retning = false;
      enemy2.death = false; enemy2.enemyX = 325; enemy2.enemyY = 100; enemy2.count = 200; enemy2.stop = false; enemy2.retning = false;
      enemy3.death = false; enemy3.enemyX = 410; enemy3.enemyY = 100; enemy3.count = 200; enemy3.stop = false; enemy3.retning = false;
      enemy4.death = false; enemy4.enemyX = 495; enemy4.enemyY = 100; enemy4.count = 200; enemy4.stop = false; enemy4.retning = false;
      enemy5.death = false; enemy5.enemyX = 580; enemy5.enemyY = 100; enemy5.count = 200; enemy5.stop = false; enemy5.retning = false;
      
      enemy6.death = false; enemy6.enemyX = 240; enemy6.enemyY = 165; enemy6.count = 200; enemy6.stop = false; enemy6.retning = false;
      enemy7.death = false; enemy7.enemyX = 325; enemy7.enemyY = 165; enemy7.count = 200; enemy7.stop = false; enemy7.retning = false;
      enemy8.death = false; enemy8.enemyX = 410; enemy8.enemyY = 165; enemy8.count = 200; enemy8.stop = false; enemy8.retning = false;
      enemy9.death = false; enemy9.enemyX = 495; enemy9.enemyY = 165; enemy9.count = 200; enemy9.stop = false; enemy9.retning = false;
      enemy10.death = false; enemy10.enemyX = 580; enemy10.enemyY = 165; enemy10.count = 200; enemy10.stop = false; enemy10.retning = false;
      
      enemy11.death = false; enemy11.enemyX = 240; enemy11.enemyY = 230; enemy11.count = 200; enemy11.stop = false; enemy11.retning = false;
      enemy12.death = false; enemy12.enemyX = 325; enemy12.enemyY = 230; enemy12.count = 200; enemy12.stop = false; enemy12.retning = false;
      enemy13.death = false; enemy13.enemyX = 410; enemy13.enemyY = 230; enemy13.count = 200; enemy13.stop = false; enemy13.retning = false;
      enemy14.death = false; enemy14.enemyX = 495; enemy14.enemyY = 230; enemy14.count = 200; enemy14.stop = false; enemy14.retning = false;
      enemy15.death = false; enemy15.enemyX = 580; enemy15.enemyY = 230; enemy15.count = 200; enemy15.stop = false; enemy15.retning = false;
      
      enemy16.death = false; enemy16.enemyX = 240; enemy16.enemyY = 295; enemy16.count = 200; enemy16.stop = false; enemy16.retning = false;
      enemy17.death = false; enemy17.enemyX = 325; enemy17.enemyY = 295; enemy17.count = 200; enemy17.stop = false; enemy17.retning = false;
      enemy18.death = false; enemy18.enemyX = 410; enemy18.enemyY = 295; enemy18.count = 200; enemy18.stop = false; enemy18.retning = false;
      enemy19.death = false; enemy19.enemyX = 495; enemy19.enemyY = 295; enemy19.count = 200; enemy19.stop = false; enemy19.retning = false;
      enemy20.death = false; enemy20.enemyX = 580; enemy20.enemyY = 295; enemy20.count = 200; enemy20.stop = false; enemy20.retning = false;
      wave += 1;
    }
  
    if(enemy1.cText == true || enemy2.cText == true || enemy3.cText == true || enemy4.cText == true || enemy5.cText == true || enemy6.cText == true || enemy7.cText == true || enemy8.cText == true || enemy9.cText == true || enemy10.cText == true || enemy11.cText == true || enemy12.cText == true || enemy13.cText == true || enemy14.cText == true || enemy15.cText == true || enemy16.cText == true || enemy17.cText == true || enemy18.cText == true || enemy19.cText == true || enemy20.cText == true){
      tekst.clear();
      displayText = "";
    }
    
    score = score + enemy1.point + enemy2.point + enemy3.point + enemy4.point + enemy5.point + enemy6.point + enemy7.point + enemy8.point + enemy9.point + enemy10.point + enemy11.point + enemy12.point + enemy13.point + enemy14.point + enemy15.point + enemy16.point + enemy17.point + enemy18.point + enemy19.point + enemy20.point;
    
    if(score > highScore){
      highScore = score;
    }
    
    if(enemy1.gameEnd == true || enemy2.gameEnd == true || enemy3.gameEnd == true  || enemy4.gameEnd == true  || enemy5.gameEnd == true  || enemy6.gameEnd == true  || enemy7.gameEnd == true  || enemy8.gameEnd == true  || enemy9.gameEnd == true  || enemy10.gameEnd == true  || enemy11.gameEnd == true  || enemy12.gameEnd == true  || enemy13.gameEnd == true  || enemy14.gameEnd == true  || enemy15.gameEnd == true  || enemy16.gameEnd == true  || enemy17.gameEnd == true  || enemy18.gameEnd == true  || enemy19.gameEnd == true  || enemy20.gameEnd == true){
      deathscreen = true;
      enemy1.death = true; enemy2.death = true; enemy3.death = true; enemy4.death = true; enemy5.death = true; enemy6.death = true; enemy7.death = true; enemy8.death = true; enemy9.death = true; enemy10.death = true; enemy11.death = true; enemy12.death = true; enemy13.death = true; enemy14.death = true; enemy15.death = true; enemy16.death = true; enemy17.death = true; enemy18.death = true; enemy19.death = true; enemy20.death = true;
      enemy1.enemyY = -75000; enemy2.enemyY = -75000; enemy3.enemyY = -75000; enemy4.enemyY = -75000; enemy5.enemyY = -75000; enemy6.enemyY = -75000; enemy7.enemyY = -75000; enemy8.enemyY = -75000; enemy9.enemyY = -75000; enemy10.enemyY = -75000; enemy11.enemyY = -75000; enemy12.enemyY = -75000; enemy13.enemyY = -75000; enemy14.enemyY = -75000; enemy15.enemyY = -75000; enemy16.enemyY = -75000; enemy17.enemyY = -75000; enemy18.enemyY = -75000; enemy19.enemyY = -75000; enemy20.enemyY = -75000;
      enemy1.gameEnd = false; enemy2.gameEnd = false; enemy3.gameEnd = false; enemy4.gameEnd = false; enemy5.gameEnd = false; enemy6.gameEnd = false; enemy7.gameEnd = false; enemy8.gameEnd = false; enemy9.gameEnd = false; enemy10.gameEnd = false; enemy11.gameEnd = false; enemy12.gameEnd = false; enemy13.gameEnd = false; enemy14.gameEnd = false; enemy15.gameEnd = false; enemy16.gameEnd = false; enemy17.gameEnd = false; enemy18.gameEnd = false; enemy19.gameEnd = false; enemy20.gameEnd = false;
      wave = 0;
      score = 0;
    }
  }


void keyTyped(){
  displayText = "";
  if(int(key) != 10){
    tekst.append(""+key);
  }
 
  if(int(key) == 8 && tekst.size() == 1){
    tekst.remove(tekst.size()-1);
  }
  if(int(key) == 8 && tekst.size() >= 2){
    tekst.remove(tekst.size()-1);
    tekst.remove(tekst.size()-1);
  }
 
  tekstArray = tekst.array();
 
  for (int i=0; i < tekstArray.length; i++) {
      print(tekstArray[i]);
  }
  println("");
  for (int i = 0; i < tekstArray.length; i++) {
    displayText = ""+displayText+""+tekstArray[i];
  }
}

void mouseClicked(){
  if(mouseX > 30 && mouseX < 445 && mouseY > 64 && mouseY < 108){
    spilValg = 1;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 128 && mouseY < 172){
    spilValg = 2;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 192 && mouseY < 236){
    spilValg = 3;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 256 && mouseY < 300){
    spilValg = 4;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 320 && mouseY < 364){
    spilValg = 5;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 457 && mouseY < 501){
    niveau = 1;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 521 && mouseY < 565){
    niveau = 2;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 585 && mouseY < 629){
    niveau = 3;
  }
  if(mouseX > 320 && mouseX < 468 && mouseY > 768 && mouseY < 812 && niveau > 0 && spilValg > 0){
    menuscreen = false;
    fill(0);
    rect(0, 0, 800, 1000);
  }
}

class Enemy{
  boolean death;
  boolean retning;
  float count = 200;
  float enemyX, enemyY;
  boolean stop;
  String regnestykke = "";
  String result = "";
  String altResult = "hack";
  int a;
  String[] rr;
  float skudx, skudy;
  boolean skyd;
  boolean cText;
  int point = 0;
  boolean active;
  boolean gameEnd;

  
  Enemy(float tempX, float tempY){
    enemyX = tempX;
    enemyY = tempY;
  }

  void display(){
    if(stop == false){
      if(spilValg == 1){
        a = floor(random(0,1.9));
        if(a == 0){
          rr = pmgdFunktion("+");
          regnestykke = rr[0];
          result = rr[1];
        }else if(a == 1){
          rr = pmgdFunktion("-");
          regnestykke = rr[0];
          result = rr[1];
        }
      }
      if(spilValg == 2){
        rr = pmgdFunktion("*");
        regnestykke = rr[0];
        result = rr[1];
      }
      if(spilValg == 3){
        rr = pmgdFunktion("/");
        regnestykke = rr[0];
        result = rr[1];
      }
      if(spilValg == 4){
        rr = geometriFunktion();
        regnestykke = rr[0];
        result = rr[1];
        altResult = rr[2];
      }
      if(spilValg == 5){
        rr = brokFunktion();
        regnestykke = rr[0];
        result = rr[1];
      }
      stop = true;
    }

    fill(0, 0, 255);
    rectMode(CENTER);
    rect(enemyX, enemyY, 80, 60);
    fill(255);
    textFont(Font);
    textSize(9);
    textLeading(9);
    
    
    println("*"+displayText+"*  *"+result+"*");
    
    cText = false;
    
    if((displayText.equals(result) || displayText.equals(altResult)) && skyd == false && death == false && active == true){
      skyd = true;
      skudx = px;
      skudy = py - 30;
      cText = true;
    }
    
    if(skyd == true){
      fill(255);
      ellipse(skudx, skudy, 10, 10);
      skudy -= 5;
      skudx = enemyX;
    }
    point = 0;
    if(dist(enemyX, enemyY, skudx, skudy) <= 20){
      death = true;
      enemyY = -75000;
      skyd = false;
      skudy = -76000;
      point = 10;
    }
    if(enemyY >= py - 15){
      gameEnd = true;
    }
    if(enemy6.enemyY > enemyY && enemy6.enemyX <= enemyX+1 && enemy6.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy7.enemyY > enemyY && enemy7.enemyX <= enemyX+1 && enemy7.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy8.enemyY > enemyY && enemy8.enemyX <= enemyX+1 && enemy8.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy9.enemyY > enemyY && enemy9.enemyX <= enemyX+1 && enemy9.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy10.enemyY > enemyY && enemy10.enemyX <= enemyX+1 && enemy10.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy11.enemyY > enemyY && enemy11.enemyX <= enemyX+1 && enemy11.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy12.enemyY > enemyY && enemy12.enemyX <= enemyX+1 && enemy12.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy13.enemyY > enemyY && enemy13.enemyX <= enemyX+1 && enemy13.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy14.enemyY > enemyY && enemy14.enemyX <= enemyX+1 && enemy14.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy15.enemyY > enemyY && enemy15.enemyX <= enemyX+1 && enemy15.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy16.enemyY > enemyY && enemy16.enemyX <= enemyX+1 && enemy16.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy17.enemyY > enemyY && enemy17.enemyX <= enemyX+1 && enemy17.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy18.enemyY > enemyY && enemy18.enemyX <= enemyX+1 && enemy18.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy19.enemyY > enemyY && enemy19.enemyX <= enemyX+1 && enemy19.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else if(enemy20.enemyY > enemyY && enemy20.enemyX <= enemyX+1 && enemy20.enemyX >= enemyX-1){
      active = false;
      fill(255,0,0);
      rect(enemyX, enemyY, 80 ,60);
    }else{
      active = true;
    }
  }
  
  void enemyMove(){
    if(retning == false){
      count += 1;
      enemyX += 1;
      if(count >= width/2 - 20){
        count = 0;
        enemyY += 10 * wave;
        retning = true;
      }
    }
    if(retning == true){
      count += 1;
      enemyX -= 1;
      if(count >= width/2 - 20){
        count = 0;
        enemyY += 10 * wave;
        retning = false;
      }
    }
  }
  
  
}

String[] pmgdFunktion (String pmgd){
  int a = 1;
  int b = 0;
  int c = 3;
  String result = "";
  String regnestykke = "";
  
  if(niveau == 1){
    a = int(random(0,10));
    b = int(random(0,10));
    while(a%c != 0){
      c = int(random(1,10));
    }
  }else if(niveau == 2){
    a = int(random(10,100));
    b = int(random(10,100));
    while(a%c != 0){
      c = int(random(1,10));
    }
  }else if(niveau == 3){
    a = int(random(100,1000));
    b = int(random(100,1000));
    while(a%c != 0){
      c = int(random(1,10));
    }
  }
  
  if(pmgd=="+"){
    result = ""+(a+b);
    regnestykke = ""+a+"+"+b;
  }else if(pmgd=="-"){
    result = ""+(a-b);
    regnestykke = ""+a+"-"+b;
  }else if(pmgd=="*"){
    result = ""+(a*c);
    regnestykke = ""+a+"*"+c;
  }else if(pmgd=="/"){
    result = ""+(a/c);
    regnestykke = ""+a+"/"+c;
  }else{
    print("fejl i pmgd");
  }
  String[] rOgR = {""+regnestykke,""+result};
  
  return(rOgR);
}


String[] geometriFunktion (){
  int a = floor(random(0,4.9));
  String regnestykke ="";
  String result ="";
  String altResult ="";
  
  if(niveau == 1){
    if(a == 0){
      regnestykke = "Areal af kvadrat med siderne L";
      result = "L*L";
      altResult = "L*L";
    }else if(a == 1){
      regnestykke = "Omkreds af kvadrat med siderne L";
      result = "L*4";
      altResult = "L+L+L+L";
    }else if(a == 2){
      regnestykke = "Areal af rektangel med siderne L og B";
      result = "L*B";
      altResult = "B*L";
    }else if(a == 3){
      regnestykke = "Omkreds af rektangel med siderne L og B";
      result = "L+L+B+B";
      altResult = "L*2+B*2";
    }else if(a == 4){
      regnestykke = "Omkreds af trekant med siderne a, b og c";
      result = "a+b+c";
      altResult = "c+b+a";
    }
  }else if(niveau == 2){
    if(a == 0){
      regnestykke = "Omkreds af cirkel med radiussen r";
      result = "pi*r*2";
      altResult = "2*r*pi";
    }else if(a == 1){
      regnestykke = "Areal af cirkel med radiussen r";
      result = "pi*r^2";
      altResult = "r^2*pi";
    }else if(a == 2){
      regnestykke = "Rumfang af cylinder med radiussen r og højden h";
      result = "pi*r^2*h";
      altResult = "h*r^2+pi";
    }else if(a == 3){
      regnestykke = "Hvad kaldes de to typer af sider i en retvinklet trekant";
      result = "katete og hypotenuse";
      altResult = "hypotenuse og katete";
    }else if(a == 4){
      regnestykke = "Hvad kaldes en streg der går fra periferi til periferi, men ikke igennem centrum";
      result = "Korde";
      altResult = "korde";
    }
  }else if(niveau == 3){
    if(a == 0){
      regnestykke = "Pythagoras med siderne a, b og c";
      result = "a^2+b^2+c^2";
      altResult = "c^2+b^2+a^2";
    }else if(a == 1){
      regnestykke = "Rumfang af kegle med radiussen r og højden h";
      result = "pi*r^2*h*1/3";
      altResult = "pi*r^2*h/3";
    }else if(a == 2){
      regnestykke = "Areal af den krumme overflade på en kegle med radiussen r og sidelængden s";
      result = "pi*r*s";
      altResult = "s*r*pi";
    }else if(a == 3){
      regnestykke = "V=x, hos=y, hyp=z, hvad er mod?";
      result = "mod=sin(x)*y";
      altResult = "sin(x)*y";
    }else if(a == 4){
      regnestykke = "hvilke tre variabler bruger enhedscirklen til at skaffe";
      result = "cos, sin og tan";
      altResult = "cos sin tan";
    }
  }
  
  String[] rOgR = {""+regnestykke,""+result,""+altResult};
  return(rOgR);
}


String[] brokFunktion (){
  String regnestykke ="";
  String result ="";
  int a;
  int b = 1;
  int c = 3;
  int d;
  int e;
  
  if(niveau == 1){
    a = int(random(1,10));
    b = int(random(1,a));
    c = int(random(1,10));
    d = floor(random(1,1.9));
    if(d == 0){
      regnestykke = ""+b+"/"+a;
      result = ""+b/a;
    }else if(d == 1){
      regnestykke = ""+b+"/"+a+"*"+c;
      result = ""+(b*c)+"/"+a;
    }
  }else if(niveau == 2){
    a = int(random(1,10));
    b = int(random(1,a));
    if(b%c != 0){
      c = int(random(1,a));
    }
    d = floor(random(1,1.9));
    if(d == 0){
      regnestykke = ""+b/a;
      result = ""+b+"/"+a;
    }else if(d == 1){
      regnestykke = ""+b+"/"+a+"*"+c;
      result = ""+(b/c)+"/"+a;
    }
  }else if(niveau == 3){
    a = int(random(1,10));
    b = int(random(1,a));
    c = int(random(1,10));
    d = int(random(1,c));
    e = floor(random(1,1.9));
    if(e == 0){
      regnestykke = ""+b+"/"+a+"+"+d+"/"+c;
      result = ""+((b*c)+(d*a))+"/"+(a*c);
    }else if(e == 1){
      regnestykke = ""+b+"/"+a+"-"+d+"/"+c;
      result = ""+((b*c)-(d*a))+"/"+(a*c);
    }
  }
  
  String[] rOgR = {""+regnestykke,""+result};
  return(rOgR);
}
