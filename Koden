float px = 400;
float py = 880;
float skudx, skudy;
boolean skyd;
int niveau = 0;
int test = 0;
boolean deathscreen;
boolean menuscreen;

int score = int(random(1,2000));
int highScore = int(random(2000,3000));
int spilValg = 0;

StringList tekst;
String[] ja = {""};
String kage;


//4 række
Enemy enemy1;
Enemy enemy2;
Enemy enemy3;
Enemy enemy4;
Enemy enemy5;

//3 række
Enemy enemy6;
Enemy enemy7;
Enemy enemy8;
Enemy enemy9;
Enemy enemy10;

//2 række
Enemy enemy11;
Enemy enemy12;
Enemy enemy13;
Enemy enemy14;
Enemy enemy15;

//1 række
Enemy enemy16;
Enemy enemy17;
Enemy enemy18;
Enemy enemy19;
Enemy enemy20;


void setup(){
  size(800,1000);
  frameRate(60);
  enemy1 = new Enemy(260, 100);
  enemy2 = new Enemy(330, 100);
  enemy3 = new Enemy(400, 100);
  enemy4 = new Enemy(470, 100);
  enemy5 = new Enemy(540, 100);
  
  enemy6 = new Enemy(260, 145);
  enemy7 = new Enemy(330, 145);
  enemy8 = new Enemy(400, 145);
  enemy9 = new Enemy(470, 145);
  enemy10 = new Enemy(540, 145);
  
  enemy11 = new Enemy(260, 190);
  enemy12 = new Enemy(330, 190);
  enemy13 = new Enemy(400, 190);
  enemy14 = new Enemy(470, 190);
  enemy15 = new Enemy(540, 190);
  
  enemy16 = new Enemy(260, 235);
  enemy17 = new Enemy(330, 235);
  enemy18 = new Enemy(400, 235);
  enemy19 = new Enemy(470, 235);
  enemy20 = new Enemy(540, 235);
  
  tekst = new StringList();
}

void draw(){
  background(0);
  if(deathscreen == true){
    textSize(32);
    text("Highscore:",50,50);
    text("Score:",50,100);
    text(""+highScore,250,50);
    text(""+score,250,100);
    text("Game Over",325,500);
    text("Tryk på en vilkårlig tast for at starte forfra",75,550);
    fill(255);
    if(keyPressed == true||mousePressed==true){
      deathscreen = false;
      fill(0);
      rect(0,0,800,1000);
      menuscreen = true;
      mouseX=0;
      mouseY=0;
    }
  }
  if(menuscreen==true){
    fill(0);
    stroke(255);
    rect(30,64,415,44);
    rect(30,128,415,44);
    rect(30,192,415,44);
    rect(30,256,415,44);
    rect(30,320,415,44);
    
    fill(0);
    stroke(255);
    rect(30,457,415,44);
    rect(30,521,415,44);
    rect(30,585,415,44);
    
    fill(0);
    stroke(255);
    rect(320,768,148,44);
    
    if(spilValg==1){
      fill(0);
      stroke(255,0,0);
      rect(30,64,415,44);
    }
    if(spilValg==2){
      fill(0);
      stroke(255,0,0);
      rect(30,128,415,44);
    }
    if(spilValg==3){
      fill(0);
      stroke(255,0,0);
      rect(30,192,415,44);
    }
    if(spilValg==4){
      fill(0);
      stroke(255,0,0);
      rect(30,256,415,44);
    }
    if(spilValg==5){
      fill(0);
      stroke(255,0,0);
      rect(30,320,415,44);
    }
    if(niveau==1){
      fill(0);
      stroke(255,0,0);
      rect(30,457,415,44);
    }
    if(niveau==2){
      fill(0);
      stroke(255,0,0);
      rect(30,521,415,44);
    }
    if(niveau==3){
      fill(0);
      stroke(255,0,0);
      rect(30,585,415,44);
    }
    
    fill(255);
    textSize(32);
    text("Startmenu",10,32);
    text("multiplikation",35,96);
    text("division",35,160);
    text("addition og subtrahering",35,224);
    text("brøker og decimalregning",35,288);
    text("geometri",35,352);
    text("Sværhedsgrad",10,425);
    text("let",35,489);
    text("medium",35,553);
    text("svær",35,617);
    text("start spil",325,800);
  }
  if(deathscreen == false && menuscreen == false){
    if(test == 0){
      String[] rr = brokFunktion();
      //print(""+rr[0]+" "+rr[1]);
   }
  test = 1;
  
  noStroke();
  fill(255);
  rect(px, py, 50, 30);
  if(keyPressed == true && key == ' ' && skyd == false){
    skyd = true;
    skudx = px;
    skudy = py - 30;
  }
  if(skyd == true){
    fill(255);
    ellipse(skudx, skudy, 10, 10);
    skudy -= 5;
    if(skudy <= 0){
      skyd = false;
    }
  }
  
  for (int i = 0; i < ja.length; i++) {
    kage = ""+kage+""+ja[i];
  }
  stroke(255);
  fill(0);
  rect(400, 950, 670, 50);
  fill(255);
  textSize(32);
  text(""+kage, 75, 963);
  
  kage = "";
  
  
  noStroke();
  //4 række
  enemy1.display();
  enemy2.display();
  enemy3.display();
  enemy4.display();
  enemy5.display();
  enemy1.enemyMove();
  enemy2.enemyMove();
  enemy3.enemyMove();
  enemy4.enemyMove();
  enemy5.enemyMove();
  
  //3 række
  enemy6.display();
  enemy7.display();
  enemy8.display();
  enemy9.display();
  enemy10.display();
  enemy6.enemyMove();
  enemy7.enemyMove();
  enemy8.enemyMove();
  enemy9.enemyMove();
  enemy10.enemyMove();
  
  //2 række
  enemy11.display();
  enemy12.display();
  enemy13.display();
  enemy14.display();
  enemy15.display();
  enemy11.enemyMove();
  enemy12.enemyMove();
  enemy13.enemyMove();
  enemy14.enemyMove();
  enemy15.enemyMove();
  
  //1 række
  enemy16.display();
  enemy17.display();
  enemy18.display();
  enemy19.display();
  enemy20.display();
  enemy16.enemyMove();
  enemy17.enemyMove();
  enemy18.enemyMove();
  enemy19.enemyMove();
  enemy20.enemyMove();
  }
}

void keyTyped(){
  if(int(key) != 10){
    tekst.append(""+key);
  }
 
  if(int(key) == 8 && tekst.size() == 1){
    tekst.remove(tekst.size()-1);
  }
  if(int(key) == 8 && tekst.size() >= 2){
    tekst.remove(tekst.size()-1);
    tekst.remove(tekst.size()-1);
  }
 
  ja = tekst.array();
 
  for (int i=0; i < ja.length; i++) {
      print(ja[i]);
  }
  println("");
}

void mouseClicked(){
  if(mouseX > 30 && mouseX < 445 && mouseY > 64 && mouseY < 108){
    spilValg = 1;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 128 && mouseY < 172){
    spilValg = 2;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 192 && mouseY < 236){
    spilValg = 3;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 256 && mouseY < 300){
    spilValg = 4;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 320 && mouseY < 364){
    spilValg = 5;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 457 && mouseY < 501){
    niveau = 1;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 521 && mouseY < 565){
    niveau = 2;
  }
  if(mouseX > 30 && mouseX < 445 && mouseY > 585 && mouseY < 629){
    niveau = 3;
  }
  if(mouseX > 320 && mouseX < 468 && mouseY > 768 && mouseY < 812 && niveau > 0 && spilValg > 0){
    menuscreen = false;
    fill(0);
    rect(0, 0, 800, 1000);
  }
}

class Enemy{
  boolean death;
  boolean retning;
  float count = 200;
  float enemyX, enemyY;
  
  Enemy(float tempX, float tempY){
    enemyX = tempX;
    enemyY = tempY;
  }
  
  void display(){
    if(death == false){
      fill(255, 0, 0);
      rectMode(CENTER);
      rect(enemyX, enemyY, 50, 30);
    }
    if(dist(enemyX, enemyY, skudx, skudy) <= 20){
      death = true;
      enemyY = 75000;
      skyd = false;
      skudy = 75000;
    }
  }
  void enemyMove(){
    if(retning == false){
      count += 1;
      enemyX += 1;
      if(count >= width/2){
        count = 0;
        enemyY += 10;
        retning = true;
      }
    }
    if(retning == true){
      count += 1;
      enemyX -= 1;
      if(count >= width/2){
        count = 0;
        enemyY += 10;
        retning = false;
      }
    }
  }
}

String[] pmgdFunktion (String pmgd){
  int a = 1;
  int b = 0;
  int c = 3;
  String result = "";
  String regnestykke = "";
  
  if(niveau == 1){
    a = int(random(0,10));
    b = int(random(0,10));
    while(a%c != 0){
      c = int(random(1,10));
    }
  }else if(niveau == 2){
    a = int(random(10,100));
    b = int(random(10,100));
    while(a%c != 0){
      c = int(random(1,10));
    }
  }else if(niveau == 3){
    a = int(random(100,1000));
    b = int(random(100,1000));
    while(a%c != 0){
      c = int(random(1,10));
    }
  }
  
  if(pmgd=="+"){
    result = ""+(a+b);
    regnestykke = ""+a+"+"+b;
  }else if(pmgd=="-"){
    result = ""+(a-b);
    regnestykke = ""+a+"-"+b;
  }else if(pmgd=="*"){
    result = ""+(a*c);
    regnestykke = ""+a+"*"+c;
  }else if(pmgd=="/"){
    result = ""+(a/c);
    regnestykke = ""+a+"/"+c;
  }else{
    print("fejl i pmgd");
  }
  String[] rOgR = {""+regnestykke,""+result};
  
  return(rOgR);
}


String[] geometriFunktion (){
  int a = floor(random(0,4.9));
  String regnestykke ="";
  String result ="";
  String altResult ="";
  
  if(niveau == 1){
    if(a == 0){
      regnestykke = "Areal af kvadreat med siderne L";
      result = "L*L";
      altResult = "L*L";
    }else if(a == 1){
      regnestykke = "Omkreds af kvadrat med siderne L";
      result = "L*4";
      altResult = "L+L+L+L";
    }else if(a == 2){
      regnestykke = "Areal af rektangel med siderne L og B";
      result = "L*B";
      altResult = "B*L";
    }else if(a == 3){
      regnestykke = "Omkreds af rektangel med siderne L og B";
      result = "L+L+B+B";
      altResult = "L*2+B*2";
    }else if(a == 4){
      regnestykke = "Omkreds af trekant med siderne a, b og c";
      result = "a+b+c";
      altResult = "c+b+a";
    }
  }else if(niveau == 2){
    if(a == 0){
      regnestykke = "Omkreds af cirkel med radiusen r";
      result = "pi*r*2";
      altResult = "2*r*pi";
    }else if(a == 1){
      regnestykke = "Areal af cirkel med radiusen r";
      result = "pi*r^2";
      altResult = "r^2*pi";
    }else if(a == 2){
      regnestykke = "Rumfang af cylinder med radiusen r og højden h";
      result = "pi*r^2*h";
      altResult = "h*r^2+pi";
    }else if(a == 3){
      regnestykke = "Hvad kaldes de to typer af sider i en retvinklet trekant";
      result = "katete og hypotenuse";
      altResult = "hypotenuse og katete";
    }else if(a == 4){
      regnestykke = "Hvad kaldes en streg der går fra periferi til periferi, men ikke igennem centrum";
      result = "Korde";
      altResult = "korde";
    }
  }else if(niveau == 3){
    if(a == 0){
      regnestykke = "Pythageoras med siderne a, b og c";
      result = "a^2+b^2+c^2";
      altResult = "c^2+b^2+a^2";
    }else if(a == 1){
      regnestykke = "Rumfrang af kegle med radiusen r og højden h";
      result = "pi*r^2*h*1/3";
      altResult = "pi*r^2*h/3";
    }else if(a == 2){
      regnestykke = "Areal af den krumme overflade på en kegle med radiusen r og sidelængden s";
      result = "pi*r*s";
      altResult = "s*r*pi";
    }else if(a == 3){
      regnestykke = "V=x, hos=y, hyp=z, havd er mod?";
      result = "mod=sin(x)*y";
      altResult = "sin(x)*y";
    }else if(a == 4){
      regnestykke = "hvilke tre variabler bruges enhedscirklen til at skaffe";
      result = "cos, sin og tan";
      altResult = "cos sin tan";
    }
  }
  
  String[] rOgR = {""+regnestykke,""+result,""+altResult};
  return(rOgR);
}


String[] brokFunktion (){
  String regnestykke ="";
  String result ="";
  int a = 1 ;
  int b;
  int c = 3;
  int d;
  int e;
  
  if(niveau == 1){
    a = int(random(1,10));
    b = int(random(1,a));
    c = int(random(1,10));
    d = floor(random(1,1.9));
    if(d == 0){
      regnestykke = ""+b+"/"+a;
      result = ""+b/a;
    }else if(d == 1){
      regnestykke = ""+b+"/"+a+"*"+c;
      result = ""+(b*c)+"/"+a;
    }
  }else if(niveau == 2){
    a = int(random(1,10));
    b = int(random(1,a));
    if(b%c != 0){
      c = int(random(1,a));
    }
    d = floor(random(1,1.9));
    if(d == 0){
      regnestykke = ""+b/a;
      result = ""+b+"/"+a;
    }else if(d == 1){
      regnestykke = ""+b+"/"+a+"*"+c;
      result = ""+(b/c)+"/"+a;
    }
  }else if(niveau == 3){
    a = int(random(1,10));
    b = int(random(1,a));
    c = int(random(1,10));
    d = int(random(1,c));
    e = floor(random(1,1.9));
    if(e == 0){
      regnestykke = ""+b+"/"+a+"+"+d+"/"+c;
      result = ""+((b*c)+(d*a))+"/"+(a*c);
    }else if(e == 1){
      regnestykke = ""+b+"/"+a+"-"+d+"/"+c;
      result = ""+((b*c)-(d*a))+"/"+(a*c);
    }
  }
  
  String[] rOgR = {""+regnestykke,""+result};
  return(rOgR);
}
